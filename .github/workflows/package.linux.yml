name: CI/CD Pipeline Package Linux

on:
  workflow_dispatch:
    inputs:
      processor:
        description: 'Choose the processor type (gpu, cpu, zluda)'
        required: false
        default: 'gpu'

env:
  FORCE_COLOR: "1"
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PROCESSOR: ${{ github.event.inputs.processor || 'gpu' }}  # Default to 'gpu' if not provided

jobs:
  build-and-deploy:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        target: [linux]
        include:
          - target: "linux"
            platform: "Linux"
            output-format: "deb"
            pre-command: "sudo apt -y install socat openssh-client python3.10-dev python3.10-config python3.10-venv python3.10-distutils libpython3.10-dev build-essential gcc make "
            runs-on: "ubuntu-latest"
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Configure system Python
        run: |
          # Make sure python3 points to Python 3.10
          if [[ "${{ matrix.target }}" == linux* ]]; then
            PYTHON_PATH=$(which python)
            sudo update-alternatives --install /usr/bin/python3 python3 $PYTHON_PATH 1
            sudo update-alternatives --set python3 $PYTHON_PATH
            python3 --version
            
            ls -l /usr/bin/python3-config || echo "There is no symlink"
            TARGET=$(readlink -f /usr/bin/python3-config || echo "none")

            if [[ "$TARGET" != *"python3.10-config" ]]; then
              CONFIG_PATH=$(find /usr -name python3.10-config | head -1)
              sudo ln -sf "$CONFIG_PATH" /usr/bin/python3-config
            fi
          
            /usr/bin/python3-config --includes
            find /usr -name "Python.h" | head -5
          fi

      - name: Select processor configuration
        working-directory: portable
        run: |
          echo "Using processor: $PROCESSOR"
          cp pyproject_$PROCESSOR.toml pyproject.toml

      - name: Set up Python environment
        run: |
          python -m venv venv --copies

          if [[ "${{ matrix.target }}" == windows* ]]; then
            .\venv\Scripts\activate  # For Windows
          elif [[ "${{ matrix.target }}" == "linux" ]]; then
            source venv/bin/activate  # For Linux/MacOS
          fi

          pip install -U pip setuptools wheel
          pip install briefcase insightface

      - name: Build application
        run: |
          if [[ "${{ matrix.target }}" == windows* ]]; then
            .\venv\Scripts\activate  # For Windows
          elif [[ "${{ matrix.target }}" == "linux" ]]; then
            source venv/bin/activate  # For Linux/MacOS
          fi
          
          cd portable
          python -m briefcase build ${{ matrix.target }}

      - name: Package application
        run: |
          if [[ "${{ matrix.target }}" == windows* ]]; then
            .\venv\Scripts\activate  # For Windows
          elif [[ "${{ matrix.target }}" == "linux" ]]; then
            source venv/bin/activate  # For Linux/MacOS
          fi
          
          cd portable
          python -m briefcase package ${{ matrix.target }} --update --adhoc-sign --no-input --log
          ls -la dist/

      - name: Setup SSH
        if: env.SSH_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH
        if: env.SSH_PRIVATE_KEY != '' && env.SSH_USER != '' && env.SSH_HOST != ''
        working-directory: portable
        run: |
          scp -o StrictHostKeyChecking=no -r dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/