name: CI/CD Pipeline Package Linux

on:
  workflow_dispatch:
    inputs:
      processor:
        description: 'Choose the processor type (gpu, cpu, zluda)'
        required: false
        default: 'gpu'

env:
  FORCE_COLOR: "1"
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PORT: ${{ secrets.SSH_PORT || 22 }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PROCESSOR: ${{ github.event.inputs.processor || 'gpu' }}  # Default to 'gpu' if not provided

jobs:
  build-and-deploy:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        target: [linux]
        include:
          - target: "linux"
            platform: "Linux"
            output-format: "deb"
            pre-command: |
              sudo apt -y install socat openssh-client build-essential gcc make
              sudo rm -rf /usr/share/dotnet
              sudo rm -rf /usr/local/lib/android
              sudo rm -rf /opt/ghc
            runs-on: "ubuntu-22.04"
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Select processor configuration
        working-directory: portable
        run: |
          echo "Using processor: $PROCESSOR"
          cp pyproject_$PROCESSOR.toml pyproject.toml

      - name: Set up Python environment
        run: |
          python -m venv venv --copies
          source venv/bin/activate  # For Linux/MacOS

          pip install -U pip setuptools wheel
          pip install briefcase insightface

      - name: Build application
        run: |
          source venv/bin/activate  # For Linux/MacOS

          cd portable
          python -m briefcase build ${{ matrix.target }}

      - name: Package application
        run: |
          source venv/bin/activate  # For Linux/MacOS

          cd portable
          python -m briefcase package ${{ matrix.target }} --update --adhoc-sign --no-input --log
          ls -la dist/

      - name: Upload Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Log-Failure-${{ matrix.target }}
          path: logs/*

      - name: Setup SSH
        if: env.SSH_PRIVATE_KEY != ''
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy via SSH
        if: env.SSH_PRIVATE_KEY != '' && env.SSH_PORT != '' && env.SSH_USER != '' && env.SSH_HOST != ''
        working-directory: portable
        run: |
          scp -r -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no -r dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/