name: CI/CD Pipeline Package Windows

on:
  workflow_dispatch:
    inputs:
      processor:
        description: 'Choose the processor type (gpu, cpu, zluda)'
        required: false
        default: 'gpu'
      output-format:
        description: 'Choose the output format (msi or zip)'
        required: true
        default: 'msi'
      sign-file:
        description: 'Sign the file (true or false)'
        required: false
        default: 'false'

env:
  FORCE_COLOR: "1"
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PORT: ${{ secrets.SSH_PORT || 22 }}
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  PROCESSOR: ${{ github.event.inputs.processor || 'gpu' }}  # Default to 'gpu' if not provided
  OUTPUT_FORMAT: ${{ github.event.inputs.output-format || 'msi' }}

jobs:
  build-and-deploy:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        target: [windows]
        include:
          - target: "windows"
            output-format: "msi"
            pre-command: |
              choco install visualstudio2022buildtools --confirm
              choco install visualstudio2022-workload-vctools --confirm
              choco install wixtoolset --version 4.0.5 --confirm
            runs-on: "windows-latest"
            python-version: "3.10"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Set WIX_HOME and update PATH
        shell: pwsh
        run: |
          Install-Module -Name SignPath -Force -Scope CurrentUser
          Write-Host "SignPath module installed"
          
          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix/releases/download/v6.0.0/wix-cli-x64.msi" -OutFile "wix-cli-x64.msi"
          Start-Process msiexec.exe -ArgumentList '/i', 'wix-cli-x64.msi', '/quiet', '/norestart' -NoNewWindow -Wait

          Invoke-WebRequest -Uri "https://github.com/wixtoolset/wix/releases/download/v6.0.0/WixAdditionalTools.exe" -OutFile "WixAdditionalTools.exe"
          Start-Process -FilePath "WixAdditionalTools.exe" -ArgumentList '/quiet', '/norestart' -NoNewWindow -Wait

          $env:WIX_HOME = "C:\Program Files\WiX Toolset v6.0"
          $env:PATH = "C:\Program Files\WiX Toolset v6.0\bin;$env:PATH"

          echo "WIX_HOME=C:\Program Files\WiX Toolset v6.0" >> $env:GITHUB_ENV
          echo "PATH=C:\Program Files\WiX Toolset v6.0\bin;$env:PATH" >> $env:GITHUB_ENV

      - name: Build electron browser
        working-directory: tools/js/browser
        shell: pwsh
        run: |
          npm install
          npx electron-builder --$env:TARGET portable

      - name: Copy browser files
        shell: pwsh
        run: |
          if (${{ github.event.inputs.sign-file }} -eq 'true') {
            $sourceDir = "tools/js/browser/dist"
            $destDir = "portable/src/win"
  
            # Create the target directory if it doesn't exist
            if (-not (Test-Path $destDir)) {
              New-Item -ItemType Directory -Path $destDir -Force | Out-Null
            }
  
            $exeFile = Get-ChildItem -Path $sourceDir -Filter *.exe -File | Select-Object -First 1
  
            if ($exeFile) {
              Write-Host "Found EXE: $($exeFile.Name), copying it"
              Copy-Item -Path $exeFile.FullName -Destination (Join-Path $destDir "webgui.exe") -Force
            }
            elseif (Test-Path "$sourceDir/win-unpacked") {
              Write-Host "No single EXE found, copying win-unpacked contents"
              Get-ChildItem -Path "$sourceDir/win-unpacked" | ForEach-Object {
                Copy-Item -Path $_.FullName -Destination $destDir -Recurse -Force
              }
            }
            else {
              Write-Host "::error::No built files found in $sourceDir"
              exit 1
            }
  
            # Display a list of copied files for verification
            Write-Host "Copied files:"
            Get-ChildItem -Path $destDir | Select-Object Name
          }
      - name: Select processor configuration
        working-directory: portable
        shell: pwsh
        run: |
          Write-Host "Using processor: $env:PROCESSOR"
          if (-not (Test-Path "pyproject_$env:PROCESSOR.toml")) {
            throw "File pyproject_$env:PROCESSOR.toml not found!"
          }
          Copy-Item "pyproject_$env:PROCESSOR.toml" -Destination "pyproject.toml"

      - name: Set up Python environment
        shell: pwsh
        run: |
          python -m venv venv --copies

          .\venv\Scripts\Activate.ps1
          
          python -m pip install -U --force-reinstall pip
          python -m pip install -U setuptools wheel
          python -m pip install briefcase insightface

          python --version
          python -m pip --version

      - name: Build application
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1

          cd portable
          python -m briefcase build $env:TARGET

          Get-ChildItem -Path .\build -Recurse | Select-Object FullName | Write-Host

      - name: Package application
        shell: pwsh
        run: |
          .\venv\Scripts\Activate.ps1
          cd portable

          python -m briefcase package $env:TARGET -p $env:OUTPUT_FORMAT --adhoc-sign --log

          $distFiles = Get-ChildItem -Path .\dist
          Write-Host "Created package files:"
          $distFiles | ForEach-Object { Write-Host $_.FullName }

      - name: SignPath installer
        shell: pwsh
        run: |
          cd portable/dist
          
          # Get path to MSI or ZIP file (dynamically)
          $artifact = Get-ChildItem -File | Where-Object { $_.Extension -in ".msi", ".zip" } | Select-Object -First 1
          
          if (-not $artifact) {
              Write-Error "MSI or ZIP file not found in dist folder!"
              exit 1
          }
          
          Write-Host "File for signature: $($artifact.FullName)"
          
          try {
            $signedPath = "$($artifact.DirectoryName)\signed_$($artifact.Name)"
          
            Submit-SigningRequest `
              -InputArtifactPath $artifact.FullName `
              -ApiToken "${{ secrets.SIGN_PATH_TOKEN }}" `
              -OrganizationId "b01997fa-53cc-4ead-afd5-d225dccbc2c9" `
              -ProjectSlug "wunjo.wladradchenko.ru" `
              -SigningPolicySlug "test-signing" `
              -OutputArtifactPath "$signedPath" `
              -WaitForCompletion
            
            # Let's replace the original file with a signed one
            if (Test-Path $signedPath) {
              Remove-Item -Path $artifact.FullName
              Rename-Item -Path "$($artifact.DirectoryName)\signed_$($artifact.Name)" -NewName $artifact.Name
              Write-Host "The file has been signed and replaced."
            } else {
                Write-Error "Signature Error! The signed file was not created."
            }
          } catch {
              Write-Warning "Signature error! Unsigned file will be used."
          }

      - name: Upload Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Log-Failure-${{ matrix.target }}
          path: logs/*

      - name: Deploy via scp
        if: env.SSH_PRIVATE_KEY != '' && env.SSH_PORT != '' && env.SSH_USER != '' && env.SSH_HOST != ''
        shell: bash
        working-directory: portable
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          scp -i ~/.ssh/id_rsa -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no -r dist/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:~/