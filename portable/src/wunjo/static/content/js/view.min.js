function getFileFormat(e) {
	let t = "other";
	switch (e.split(".")[e.split(".").length - 1]) {
		case "jpg":
		case "jpeg":
		case "png":
		case "gif":
			t = "image";
			break;
		case "mp4":
		case "mov":
		case "avi":
			t = "video";
			break;
		case "mp3":
		case "wav":
		case "ogg":
			t = "audio"
	}
	return t
}

function getFileMetadataDate(e) {
	var t, a;
	return e ? (t = (e = new Date(1e3 * e)).getFullYear(), a = e.getMonth(), {
		day: e.getDate(),
		month: a,
		year: t
	}) : {
		day: null,
		month: null,
		year: null
	}
}
let viewSystem = userFileTree;
const currentPaths = new Set;

function initViewContent(e = null) {
	(e.includes("group") ? initViewContentGroup : initViewContentUniq)(e)
}

function initViewContentGroup(e = null) {
	const i = window.location.origin;
	var t = JSON.parse(JSON.stringify(viewSystem));
	t.forEach(n => {
		n.isDirectory ? n.child.forEach(a => {
			a.isDirectory ? a.child.forEach((e, t) => {
				e.isDirectory || (e.fullPath = `${i}/media/content/${userContentId}/${moduleName}/${n.name}/${a.name}/` + e.name, e.fileFormat = getFileFormat(e.name), e.index = t, e.useFile = !0)
			}) : (a.fullPath = `${i}/media/content/${userContentId}/${moduleName}/${n.name}/` + a.name, a.fileFormat = getFileFormat(a.name), a.useFile = !1)
		}) : (n.fullPath = `${i}/media/content/${userContentId}/${moduleName}/` + n.name, n.fileFormat = null, n.useFile = null)
	}), setupViewContentGroup(t, e)
}

function setupViewContentGroup(e, t = null) {
	var a = new Date,
		n = document.querySelector(".user-calendar-date"),
		i = parseInt(n.getAttribute("data-year-from")) || a.getFullYear(),
		o = parseInt(n.getAttribute("data-month-from")) || a.getMonth(),
		r = parseInt(n.getAttribute("data-day-from")) || a.getDate(),
		l = parseInt(n.getAttribute("data-year-to")) || a.getFullYear(),
		c = parseInt(n.getAttribute("data-month-to")) || a.getMonth(),
		n = parseInt(n.getAttribute("data-day-to")) || a.getDate(),
		s = (new Date(i, o, r), new Date(l, c, n), document.querySelector(".view-content"));
	s.querySelectorAll(".view-root").forEach(e => {
		e.classList.contains("view-load") || e.remove()
	});
	for (const f in e)
		if (e[f].isDirectory)
			for (const g in e[f].child)
				if (e[f].child[g].isDirectory) {
					var u = e[f].child[g],
						d = getFileMetadataDate(u.created),
						m = (d.day && d.month && d.year, new Date(d.year, d.month, d.day), []);
					for (const w in e[f].child[g].child) {
						var h = u.child[g].fileFormat;
						!0 === u.child[g].useFile && "image" === h && m.push(e[f].child[g].child[w])
					}
					m.sort((e, t) => e.name.localeCompare(t.name)), 0 < m.length && (modalContent = createViewImageGroup(m, u, () => reloadViewContent(moduleName, t))) && s.appendChild(modalContent)
				}
}

function initViewContentUniq(e = null) {
	const a = window.location.origin;
	var t = JSON.parse(JSON.stringify(viewSystem));
	t.forEach(t => {
		t.isDirectory ? t.child.forEach(e => {
			e.isDirectory || (e.fullPath = `${a}/media/content/${userContentId}/${moduleName}/${t.name}/` + e.name, e.fileFormat = getFileFormat(e.name), e.useFile = !0)
		}) : (t.fullPath = `${a}/media/content/${userContentId}/${moduleName}/` + t.name, t.fileFormat = null, t.useFile = null)
	}), setupViewContentUniq(t, e)
}

function setupViewContentUniq(c, s = null) {
	var e = new Date,
		t = document.querySelector(".user-calendar-date"),
		a = parseInt(t.getAttribute("data-year-from")) || e.getFullYear(),
		n = parseInt(t.getAttribute("data-month-from")) || e.getMonth(),
		i = parseInt(t.getAttribute("data-day-from")) || e.getDate(),
		o = parseInt(t.getAttribute("data-year-to")) || e.getFullYear(),
		r = parseInt(t.getAttribute("data-month-to")) || e.getMonth(),
		t = parseInt(t.getAttribute("data-day-to")) || e.getDate();
	const u = new Date(a, n, i),
		d = new Date(o, r, t),
		m = document.querySelector(".view-content");
	m.querySelectorAll(".view-root").forEach(e => {
		var t, a;
		!e.classList.contains("view-load") && (a = e.getAttribute("data-date"), t = e.getAttribute("data-path"), a || (currentPaths.has(t) && currentPaths.delete(t), e.remove()), (a = new Date(a)) < u || a > d) && (currentPaths.has(t) && currentPaths.delete(t), e.remove())
	}), async function() {
		for (const o in c)
			if (c[o].isDirectory)
				for (const r in c[o].child)
					if (!c[o].child[r].isDirectory) {
						var t = c[o].child[r],
							e = getFileMetadataDate(t.created),
							a = t.fileFormat,
							n = t.useFile,
							i = t.fullPath;
						if (null != e.day && null != e.month && null != e.year) {
							e = new Date(e.year, e.month, e.day);
							try {
								if (e < u || e > d || currentPaths.has(i)) continue
							} catch {
								if (e < u || e > d) continue
							}
							if (!0 === n) {
								let e;
								if ("video" === a && s.includes("video")) e = createViewVideoStatic(i, t, () => reloadViewContent(moduleName, s));
								else if ("image" === a && s.includes("image")) e = createViewImage(i, t, () => reloadViewContent(moduleName, s));
								else {
									if ("audio" !== a || !s.includes("audio")) continue;
									e = createViewAudio(i, t, () => reloadViewContent(moduleName, s))
								}
								if (e) {
									m.appendChild(e), currentPaths.add(i);
									const l = m.lastElementChild.querySelector("video");
									l && await new Promise(e => {
										l.onloadeddata = () => {
											e()
										}
									})
								}
							}
						}
					}
	}()
}

function reloadViewContent(e, t = null) {
	fetch("/content-reload/" + e, {
		method: "GET",
		headers: {
			"Content-Type": "application/json"
		}
	}).then(e => e.json()).then(e => {
		200 === e.status ? (viewSystem = e.user_file_tree, viewSys = JSON.parse(JSON.stringify(viewSystem)), initViewContent(t)) : frontendConsoleLogToBackendPrint(e.message)
	}).catch(e => {
		console.error("Error:", e)
	})
}
initViewContent(userFileFormats);